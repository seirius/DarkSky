package darksky.modelo.bean;
// Generated 13-feb-2016 16:07:43 by Hibernate Tools 4.3.1.Final

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import darksky.exceptions.ExceptionDAO;
import darksky.util.MyUtil;

/**
 * Post generated by hbm2java
 */
@Entity
@Table(name = "post", catalog = "dark_sky")
public class Post implements java.io.Serializable {
	private static final long serialVersionUID = 1L;
	
	private Integer id;
	private CategoriaPost categoriaPost;
	private Imagen imagen;
	private Usuario usuario;
	private String titulo;
	private String texto;
	private Long votos = new Long(0);
	private Date fechaCreacion;
	private String enPortada = "N"; //Default N
	private Integer visitas = 1;
	private Set<Comentario> comentarios = new HashSet<Comentario>(0);

	public Post() {
	}
	
	public Post(CategoriaPost categoriaPost, Usuario usuario, String titulo, String texto) {
		this.setCategoriaPost(categoriaPost);
		this.setUsuario(usuario);
		this.setTitulo(titulo);
		this.setTexto(texto);
		this.setFechaCreacion(MyUtil.getCurrentDate());
	}
	
	public Post(CategoriaPost categoriaPost, Usuario usuario, String titulo, String texto, Date fechaCreacion) {
		this.setCategoriaPost(categoriaPost);
		this.setUsuario(usuario);
		this.setTitulo(titulo);
		this.setTexto(texto);
		this.setFechaCreacion(fechaCreacion);
	}

	public Post(CategoriaPost categoriaPost, Imagen imagen, Usuario usuario, String titulo, String texto, Long votos, String enPortada, Set<Comentario> comentarios) {
		this.setCategoriaPost(categoriaPost);
		this.setUsuario(usuario);
		this.setTitulo(titulo);
		this.setTexto(texto);
		this.setEnPortada(enPortada);
		
		this.imagen = imagen;
		this.votos = votos;
		this.comentarios = comentarios;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "ID", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "CATEGORIA", nullable = false)
	public CategoriaPost getCategoriaPost() {
		return this.categoriaPost;
	}

	public void setCategoriaPost(CategoriaPost categoriaPost) {
		if (categoriaPost == null) throw new ExceptionDAO("Categoria no puede ser nula");
		this.categoriaPost = categoriaPost;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "IMAGEN")
	public Imagen getImagen() {
		return this.imagen;
	}

	public void setImagen(Imagen imagen) {
		this.imagen = imagen;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "PROPIETARIO", nullable = false)
	public Usuario getUsuario() {
		return this.usuario;
	}

	public void setUsuario(Usuario usuario) {
		if (usuario == null) throw new ExceptionDAO("Usuario no puede ser nulo");
		this.usuario = usuario;
	}

	@Column(name = "TITULO", nullable = false, length = 100)
	public String getTitulo() {
		return this.titulo;
	}

	public void setTitulo(String titulo) {
		if (MyUtil.isEmpty(titulo)) {
			throw new ExceptionDAO("Titulo no puede ser nulo");
		} else if (titulo.length() > 255) {
			throw new ExceptionDAO("Titulo no puede tener mas de 100 caracteres");
		}
		
		this.titulo = titulo;
	}

	@Column(name = "TEXTO", nullable = false)
	public String getTexto() {
		return this.texto;
	}


	public void setTexto(String texto) {
		if (MyUtil.isEmpty(texto)) {
			throw new ExceptionDAO("Texto no puede ser nulo");
		} else if (texto.length() > 2000) {
			throw new ExceptionDAO("Texto no puede tener mas de 2000 caracteres");
		}
		
		this.texto = texto;
	}

	@Column(name = "VOTOS", precision = 10, scale = 0)
	public Long getVotos() {
		return this.votos;
	}

	public void setVotos(Long votos) {
		this.votos = votos;
	}

	@Column(name = "EN_PORTADA", length = 1)
	public String getEnPortada() {
		return this.enPortada;
	}

	public void setEnPortada(String enPortada) {
		if (MyUtil.isEmpty(enPortada)) {
			throw new ExceptionDAO("En portada no puede ser nula");
		} else if (enPortada.compareToIgnoreCase("S") != 0 && enPortada.compareToIgnoreCase("N") != 0) {
			throw new ExceptionDAO("En portada solo puede tener el valor de S o N");
		}
		
		this.enPortada = enPortada;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "post")
	public Set<Comentario> getComentarios() {
		return this.comentarios;
	}

	public void setComentarios(Set<Comentario> comentarios) {
		this.comentarios = comentarios;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "FECHA_CREACION", nullable = true, length = 19)
	public Date getFechaCreacion() {
		return this.fechaCreacion;
	}

	public void setFechaCreacion(Date fechaCreacion) {
		this.fechaCreacion = fechaCreacion;
	}
	
	@Column(name = "VISITAS", nullable = true)
	public Integer getVisitas() {
		return this.visitas;
	}

	public void setVisitas(Integer visitas) {
		this.visitas = visitas;
	}


}
