package darksky.modelo.bean;
// Generated 11-feb-2016 3:11:32 by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import darksky.exceptions.ExceptionBEAN;
import darksky.util.MyUtil;

/**
 * Usuario generated by hbm2java
 */
@Entity
@Table(name = "usuario", catalog = "dark_sky")
public class Usuario implements java.io.Serializable {
	private static final long serialVersionUID = 1L;
	
	private String nick;
	private Rol rol = new Rol("Usuario");
	private String nombre;
	private String email;
	private String password;
	private Long numComentarios = new Long(0); //Default 0
	private Long oro = new Long(100); //Default 100
	private Date fechaAlta;
	private Item avatar;
	private Set<Post> posts = new HashSet<Post>(0);
	private Set<Comentario> comentarios = new HashSet<Comentario>(0);
	private Set<Inventario> inventarios = new HashSet<Inventario>(0);
	private Set<PostWiki> postWikis = new HashSet<PostWiki>(0);
	private Set<Respuesta> respuestas = new HashSet<Respuesta>(0);

	public Usuario() {
	}
	
	public Usuario(String nick, Rol rol, String email, String password) {
		this.setNick(nick);
		this.setRol(rol);
		this.setEmail(email);
		this.setPassword(password);
		this.setFechaAlta(MyUtil.getCurrentDate());
	}

	public Usuario(String nick, Rol rol, String email, String password, Date fechaAlta) {
		this.setNick(nick);
		this.setRol(rol);
		this.setEmail(email);
		this.setPassword(password);
		this.setFechaAlta(fechaAlta);
	}

	public Usuario(String nick, Rol rol, String nombre, String email, String password, Long numComentarios, Long oro, Date fechaAlta, Set<Post> posts, Set<Comentario> comentarios, Set<Inventario> inventarios, Set<PostWiki> postWikis, Set<Respuesta> respuestas) {
		this.nick = nick;
		this.rol = rol;
		this.nombre = nombre;
		this.email = email;
		this.password = password;
		this.numComentarios = numComentarios;
		this.oro = oro;
		this.fechaAlta = fechaAlta;
		this.posts = posts;
		this.comentarios = comentarios;
		this.inventarios = inventarios;
		this.postWikis = postWikis;
		this.respuestas = respuestas;
	}

	@Id

	@Column(name = "NICK", unique = true, nullable = false, length = 30)
	public String getNick() {
		return this.nick;
	}

	public void setNick(String nick) {
		if (MyUtil.isEmpty(nick)) {
			throw new ExceptionBEAN("Nick no puede ser nulo");
		} else if (nick.length() > 30) {
			throw new ExceptionBEAN("Nick no puede tener mas de 30 caracteres");
		}
		
		this.nick = nick;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "ROL", nullable = false)
	public Rol getRol() {
		return this.rol;
	}

	public void setRol(Rol rol) {
		if (rol == null) throw new ExceptionBEAN("Rol no puede ser nulo");
		this.rol = rol;
	}

	@Column(name = "NOMBRE", length = 100)
	public String getNombre() {
		return this.nombre;
	}

	public void setNombre(String nombre) {
		if (nombre != null && nombre.length() > 100) throw new ExceptionBEAN("Nombre no puede tener mas de 100 caracteres");
		this.nombre = nombre;
	}

	@Column(name = "EMAIL", nullable = false, length = 50)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		if (MyUtil.isEmpty(email)) {
			throw new ExceptionBEAN("Email no puede ser nulo");
		} else if (email.length() > 50) {
			throw new ExceptionBEAN("Email no puede tener mas de 50 caracteres");
		}
		
		this.email = email;
	}

	@Column(name = "PASSWORD", nullable = false, length = 30)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		if (MyUtil.isEmpty(password)) {
			throw new ExceptionBEAN("Contraseña no puede ser nulo");
		} else if (password.length() > 30) {
			throw new ExceptionBEAN("Contraseña no puede tener mas de 30 caracteres");
		}
		
		this.password = password;
	}

	@Column(name = "NUM_COMENTARIOS", precision = 10, scale = 0)
	public Long getNumComentarios() {
		return this.numComentarios;
	}

	public void setNumComentarios(Long numComentarios) {
		this.numComentarios = numComentarios;
	}

	@Column(name = "ORO", precision = 10, scale = 0)
	public Long getOro() {
		return this.oro;
	}

	public void setOro(Long oro) {
		this.oro = oro;
	}
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "AVATAR", nullable = false)
	public Item getAvatar() {
		return this.avatar;
	}

	public void setAvatar(Item avatar) {
		if (avatar == null) throw new ExceptionBEAN("Avatar no puede ser nulo");
		this.avatar = avatar;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "FECHA_ALTA", nullable = true, length = 19)
	public Date getFechaAlta() {
		return this.fechaAlta;
	}

	public void setFechaAlta(Date fechaAlta) {
		this.fechaAlta = fechaAlta;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usuario")
	public Set<Post> getPosts() {
		return this.posts;
	}

	public void setPosts(Set<Post> posts) {
		this.posts = posts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usuario")
	public Set<Comentario> getComentarios() {
		return this.comentarios;
	}

	public void setComentarios(Set<Comentario> comentarios) {
		this.comentarios = comentarios;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usuario")
	public Set<Inventario> getInventarios() {
		return this.inventarios;
	}

	public void setInventarios(Set<Inventario> inventarios) {
		this.inventarios = inventarios;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usuario")
	public Set<PostWiki> getPostWikis() {
		return this.postWikis;
	}

	public void setPostWikis(Set<PostWiki> postWikis) {
		this.postWikis = postWikis;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usuario")
	public Set<Respuesta> getRespuestas() {
		return this.respuestas;
	}

	public void setRespuestas(Set<Respuesta> respuestas) {
		this.respuestas = respuestas;
	}

}
