package darksky.modelo.bean;
// Generated 11-feb-2016 3:11:32 by Hibernate Tools 4.3.1.Final

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import darksky.exceptions.ExceptionBEAN;
import darksky.exceptions.ExceptionDAO;

/**
 * Inventario generated by hbm2java
 */
@Entity
@Table(name = "inventario", catalog = "dark_sky")
public class Inventario implements java.io.Serializable {
	private static final long serialVersionUID = 1L;
	
	private InventarioId id;
	private Item item;
	private Usuario usuario;
	private Long cantidad = new Long(1); //Default 1

	public Inventario() {
	}

	public Inventario(InventarioId id, Item item, Usuario usuario) {
		this.setId(id);
		this.item = item;
		this.usuario = usuario;
	}

	public Inventario(InventarioId id, Item item, Usuario usuario, Long cantidad) {
		this.setId(id);
		this.item = item;
		this.usuario = usuario;
		this.setCantidad(cantidad);
	}

	@EmbeddedId

	@AttributeOverrides({ @AttributeOverride(name = "usuarioNick", column = @Column(name = "USUARIO_NICK", nullable = false, length = 30) ), @AttributeOverride(name = "itemNombre", column = @Column(name = "ITEM_NOMBRE", nullable = false, length = 30) ) })
	public InventarioId getId() {
		return this.id;
	}

	public void setId(InventarioId id) {
		if (id == null) {
			throw new ExceptionDAO("ID de inventario no puede ser nulo (Usuario e Item)");
		}
		
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ITEM_NOMBRE", nullable = false, insertable = false, updatable = false)
	public Item getItem() {
		return this.item;
	}

	public void setItem(Item item) {
		if (item == null) throw new ExceptionBEAN("Item no puede ser nulo");
		this.item = item;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "USUARIO_NICK", nullable = false, insertable = false, updatable = false)
	public Usuario getUsuario() {
		return this.usuario;
	}

	public void setUsuario(Usuario usuario) {
		if (usuario == null) throw new ExceptionBEAN("Usuario no puede ser nulo");
		this.usuario = usuario;
	}

	@Column(name = "CANTIDAD", precision = 10, scale = 0)
	public Long getCantidad() {
		return this.cantidad;
	}

	public void setCantidad(Long cantidad) {
		if (cantidad == null) throw new ExceptionDAO("Cantidad no puede ser nula");
		this.cantidad = cantidad;
	}

}
